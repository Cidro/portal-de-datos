<?php

namespace Repositories;

use Doctrine\ORM\EntityRepository;

/**
 * Recurso
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Recurso extends EntityRepository
{
    /*Obtiene el ultimo codigo insertado para los recursos*/
    public function getMaxCodigo()
    {

        $qb = $this->_em->createQueryBuilder();

        $qb->select('MAX(r.codigo)');
        $qb->from('Entities\Recurso', 'r');

        return intval($qb->getQuery()->getSingleScalarResult());
    }

    //Obtiene los recursos asociados a un dataset incluyendo el total de descargas indiviuales
    public function getRecursos($datasetId)
    {

        $qb = $this->_em->createQueryBuilder();

        $query = $qb->select('r, SUM(d.count) as totaldescargas')
            ->from('Entities\Recurso', 'r')
            ->leftJoin('r.descargas', 'd')
            ->where('r.dataset = :datasetid')
            ->setParameter('datasetid', $datasetId)
            ->groupBy('r.codigo')
            ->getQuery();

        return $query->getResult();
    }

    public function getPublicadoByCodigo($codigo)
    {
        $qb = $this->_em->createQueryBuilder();

        $query = $qb->select('r')
            ->from('Entities\Recurso', 'r')
            ->leftJoin('r.dataset', 'd')
            ->where('r.codigo = :codigo AND d.publicado = 1 AND d.maestro = 0')
            ->setParameter('codigo', $codigo)
            ->getQuery();

        return $query->getSingleResult();
    }


    /**
     * Crea un nuevo recurso
     * @param array $atributos
     * @param \Entities\Dataset $dataset
     * @return \Entities\Recurso
     */
    public function creaRecurso(array $atributos, \Entities\Dataset $dataset = null)
    {
        $CI = & get_instance();
        $CI->load->helper('array');

        $recurso = new \Entities\Recurso;

        $recurso->setCodigo(1 + $this->getMaxCodigo());
        $recurso->setCreatedAt(new \DateTime());
        $recurso->setDescripcion(element('descripcion', $atributos, ''));
        $recurso->setUrl(element('url', $atributos, ''));
        $recurso->setUpdatedAt(new \DateTime());
        $recurso->setDataset($dataset);
        $recurso->fetchMetadata();

        $errors = $recurso->validate();

        if (!$errors) {
            $this->_em->persist($recurso);
            $this->_em->flush();
        }

        return $recurso;
    }

    /**
     * Graba un recurso y genera la nueva version del dataset
     * @param \Entities\Recurso $recurso
     * @return \Entities\Recurso | array
     */
    public function grabaRecurso(\Entities\Recurso $recurso){

        $esNuevo = is_null($recurso->getId());

        //Se debe obtener la metadata del recurso
        if($recurso->getMime() == '' || $recurso->getSize() == '')
            $recurso->fetchMetadata();

        if($esNuevo) {
            $recurso->setCodigo($this->getMaxCodigo() + 1);
            $recurso->setCreatedAt(new \DateTime());
            $recurso->setUpdatedAt(new \DateTime());
        } else {
            $recurso->setUpdatedAt(new \DateTime());
        }

        $errors = $recurso->validate();

        if(empty($errors)){
            $this->_em->persist($recurso);
            $this->_em->flush();

            //Genera una nueva version del dataset con el nuevo recurso
            $nuevaVersion = $recurso->getDataset()->generaVersion(false);
            $nuevaVersion->createLog('<p>Modificaci√≥n en <strong>Recursos</strong>:</p><ul><li>Recurso id:['.$recurso->getId().'] ' . ($esNuevo ? 'creado' : 'actualizado' ) . '</li></ul>');

            return $recurso;
        } else {
            return $errors;
        }
    }

    public function getRecursosPublicados(){
        $qb = $this->_em->createQueryBuilder();

        $query = $qb->select('r,d,s')
            ->from('Entities\Recurso', 'r')
            ->leftJoin('r.dataset', 'd')
            ->leftJoin('d.servicio', 's')
            ->where('d.publicado = 1 AND d.maestro = 0 AND r.size IS NOT NULL')
            ->getQuery();

        return $query->getResult(2);
    }
}